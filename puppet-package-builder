#!/usr/bin/python
# -*- coding: utf8 -*-
"""
Author : Julien Georges
Project : https://github.com/GiooDev/box
Date : October 2014
Description : Allow you to build a package (rpm/deb) from a standard Puppet module.
  The script will automatically get the informations from metadata.json file to build the package.
"""
import json
import os
import sys
import argparse

## Configuration
#Default parameters
pkg_prefix = 'puppet-mod-' #The prefix of your packages
pkg_type = 'rpm' #By default we create rpms
pkg_repo = '/etc/pkg_repos/puppet-mod' #Where to build your packages
pkg_install_dir = '/usr/share/puppet/modules-repo' #Where to install the file (.tar.gz)

## Parameters
parser = argparse.ArgumentParser(description='This script allows you to automatically build packages from Puppet modules.')
parser.add_argument('-v', '--verbose', help='Enable verbose output', action='store_true')
parser.add_argument('-p', '--path', help='The path of the module to build (default: current dir)', type=str)
parser.add_argument('--prefix', help='The prefix given to your package (default: '+pkg_prefix+')', type=str)
parser.add_argument('-t', '--type', help='The type of package you want to create (deb, rpm, tar) (default: '+pkg_type+')', type=str, choices=['deb', 'rpm', 'tar'])
parser.add_argument('-r', '--repo', help='Select the repository to generate the rpm (default: '+pkg_repo+')', type=str)
parser.add_argument('-d', '--dest', help='The directory to install the puppet module (default: '+pkg_install_dir+')', type=str)
args = parser.parse_args()

#If we get a path in parameter
if args.path:
    path = args.path #Then we set 
else:
    path = os.getcwd() #Unless, we get the current path

if args.prefix:
    pkg_prefix = args.prefix

if args.type:
    pkg_type = args.type

if args.repo:
    pkg_repo = args.repo

if args.dest:
    pkg_install_dir = args.dest

## Execution
#We check if the directory where the packages will be created exist
pkg_repo += '/'+pkg_type #We create a repo for each type of packages
if not os.path.isdir(pkg_repo):
    os.makedirs(pkg_repo)

# Check the correct installation of fpm
fpm_bin = '/usr/local/bin/fpm'
if os.path.isfile(fpm_bin):
    if args.verbose:
        print('fpm is correctly installed, continue building process...')
else:
    print('Could not find fpm command. Exiting script...')
    os._exit(1)

# Check the existence of the metadata.json file
json_file = path+'/metadata.json'
if os.path.isfile(json_file):
    # Creating pkg/ directory with 'puppet module build' command
    os.system('puppet module build '+path)

    # Open json file and load values
    json_data = open(json_file).read()
    values = json.loads(json_data)

    # The complete package name with the prefix
    pkg_name = pkg_prefix+values['name']

    # Preparing tmp elements
    tar_name = values['name']+'-'+values['version']+'.tar.gz'
    tmp_install_dir = path+'/pkg/'+pkg_install_dir
    ori_tar_module = path+'/pkg/'+tar_name
    #We create the install dir
    os.makedirs(tmp_install_dir)
    #We copy the .tar.gz on the install dir
    os.system('cp '+ori_tar_module+' '+tmp_install_dir)

    #TODO: Add checks for every values
    fpm_cmd = fpm_bin+' -s dir'                #the package type to use as input
    fpm_cmd += ' -n '+pkg_name                 #the name to give to the package
    fpm_cmd += ' --version '+values['version'] #the version to give to the package
    fpm_cmd += ' -t '+pkg_type                 #the expected package type (rpm, deb, tar)
    fpm_cmd += ' --package '+pkg_repo          #The package file path to output
    fpm_cmd += ' -C '+path+'/pkg/'             #Change directory to here before searching for files
    fpm_cmd += ' --force'                      #overwrite if the package already exist
    fpm_cmd += " --url '"+values['project_page']+"'"
    fpm_cmd += " --maintainer '"+values['author']+"'"
    if args.verbose:
        fpm_cmd += ' --verbose'
    # Dependencies between other modules
    #TODO: Review this part because on some puppet modules the version string is not correct
    for i in range(0, len(values['dependencies'])) :
        cmd += " --depends '"+pkg_prefix+values['dependencies'][i]['name'].replace('/', '-')+' '+values['dependencies'][i]['version_requirement']+"'"
    #We get the first directory from the pkg_install_dir
    if pkg_install_dir[0] == os.sep:
        fpm_cmd += ' '+pkg_install_dir.split(os.sep)[1] #The directory to package
    else:
        fpm_cmd += ' '+pkg_install_dir.split(os.sep)[0] #The directory to package

    # Creating the package (deb/rpm) with fpm command prepared before
    if args.verbose:
        print('Executing: '+fpm_cmd)
    os.system(fpm_cmd)

    # Cleaning tmp elements
    os.remove(tmp_install_dir+'/'+tar_name)
    os.removedirs(tmp_install_dir)
else:
    print('Could not find '+json_file+' file. Exiting script')
    os._exit(1)
